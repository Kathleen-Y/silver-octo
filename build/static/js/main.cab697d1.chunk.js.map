{"version":3,"sources":["serviceWorker.js","components/header/header.jsx","components/employeeData/EmployeeData.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","className","EmployeeData","props","scope","onClick","handleSort","id","class","users","map","user","key","email","src","picture","small","alt","name","first","last","phone","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,SCNSC,EATA,WACb,OACE,yBAAKC,UAAU,oCACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,WAAd,yBCoBOC,EAzBM,SAACC,GAClB,OACE,2BAAOF,UAAU,SACf,2BAAOA,UAAU,cACf,4BACE,wBAAIG,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,OAAoB,0BAAMC,QAASF,EAAMG,YAAY,uBAAGC,GAAG,OAAON,UAAWE,EAAMK,UACnF,wBAAIJ,MAAM,OAAV,QAAqB,0BAAMC,QAASF,EAAMG,YAAY,uBAAGC,GAAG,QAAQN,UAAWE,EAAMK,UACrF,wBAAIJ,MAAM,OAAV,QAAqB,0BAAMC,QAASF,EAAMG,YAAY,uBAAGC,GAAG,QAAQN,UAAWE,EAAMK,YAGzF,+BACCL,EAAMM,MAAMC,KAAI,SAAAC,GAAI,OACnB,wBAAIC,IAAKD,EAAKE,OACZ,4BAAI,yBAAKC,IAAKH,EAAKI,QAAQC,MAAOC,IAAI,mBACtC,4BAAKN,EAAKO,KAAKC,MAAf,IAAuBR,EAAKO,KAAKE,MACjC,4BAAKT,EAAKU,OACV,4BAAKV,EAAKE,cCJPS,EATH,WACV,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SJsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cab697d1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and employees)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from \"react\";\nimport \"./style.css\";\n\nconst Header = () => {\n  return (\n    <div className=\"jumbotron jumbotron-fluid header\">\n      <div className=\"container\">\n        <h3 className=\"display\">Employee Directory</h3>\n      </div>\n    </div>\n  )\n}\nexport default Header;","import React from \"react\";\n\nconst EmployeeData = (props) => {\n    return (\n      <table className=\"table\">\n        <thead className=\"thead-dark\">\n          <tr>\n            <th scope=\"col\">Photo</th>\n            <th scope=\"col\">Name<span onClick={props.handleSort}><i id=\"name\" className={props.class}></i></span></th>\n            <th scope=\"col\">Phone<span onClick={props.handleSort}><i id=\"phone\" className={props.class}></i></span></th>\n            <th scope=\"col\">Email<span onClick={props.handleSort}><i id=\"email\" className={props.class}></i></span></th>\n          </tr>\n        </thead>\n        <tbody>\n        {props.users.map(user => (\n          <tr key={user.email}>\n            <td><img src={user.picture.small} alt=\"employeePhoto\" /></td>\n            <td>{user.name.first} {user.name.last}</td>\n            <td>{user.phone}</td>\n            <td>{user.email}</td>\n          </tr>\n        ))}\n        </tbody>\n      </table>\n    )\n}\n\nexport default EmployeeData;","import React from 'react';\n//module not found...\nimport Header from \"./components/header/header\";\nimport EmployeeData from \"./components/employeeData/EmployeeData\";\nimport \"./index.css\";\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <EmployeeData />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//for styling\nimport './index.css';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n//for the main guts\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}